# =============================================================================
# Simple and Reliable Dockerfile for Next.js + Prisma
# Based on proven patterns from web research
# =============================================================================

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache libc6-compat openssl dumb-init

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* pnpm-lock.yaml* ./

# Install dependencies
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then \
    npm ci; \
  else \
    echo "No lockfile found" && exit 1; \
  fi

# Copy application code
COPY . .

# Set environment variables for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
ENV NEXTAUTH_SECRET="dummy-secret-for-build"
ENV NEXTAUTH_URL="http://localhost:3000"
ENV GOOGLE_CLIENT_ID="dummy"
ENV GOOGLE_CLIENT_SECRET="dummy"
ENV STRIPE_PUBLISHABLE_KEY="pk_test_dummy"
ENV STRIPE_SECRET_KEY="sk_test_dummy"
ENV STRIPE_WEBHOOK_SECRET="whsec_dummy"
ENV NEXT_PUBLIC_WEBSOCKET_URL="ws://localhost:3000"
ENV GEMINI_API_KEY="dummy"
ENV EMAIL_SERVER_HOST="localhost"
ENV EMAIL_SERVER_PORT="587"
ENV EMAIL_SERVER_USER="dummy"
ENV EMAIL_SERVER_PASSWORD="dummy"
ENV EMAIL_FROM="dummy@localhost"
ENV PRISMA_TELEMETRY_INFORMATION='{"is_docker":true}'

# Generate Prisma client
RUN npx prisma generate

# Build the application
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    pnpm build; \
  else \
    npm run build; \
  fi

# Production image
FROM node:20-alpine AS production

# Install system dependencies
RUN apk add --no-cache libc6-compat openssl dumb-init

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set working directory
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV PRISMA_TELEMETRY_INFORMATION='{"is_docker":true}'

# Copy built application and dependencies
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/.next ./.next
COPY --from=base /app/public ./public
COPY --from=base /app/prisma ./prisma
COPY --from=base /app/server.js ./

# Handle ws-server directory (create stub if missing)
RUN if [ -d "/app/ws-server" ]; then \
      cp -r /app/ws-server ./ws-server; \
    else \
      mkdir -p ./ws-server/src; \
      echo "module.exports = { notificationWebSocketServer: { createWebSocketServer: () => {} } };" > ./ws-server/src/websocket-server.js; \
    fi

# Set correct ownership
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/hello || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]
