#!/usr/bin/env node

/**
 * üîß Fix RAG Migration
 * Fixes the user ID type issues and completes the migration
 */

const { PrismaClient } = require('@prisma/client')

console.log('üîß Fixing RAG Migration...\n')

const prisma = new PrismaClient()

async function fixMigration() {
  try {
    console.log('‚úÖ Connected to database via Prisma')

    // Check user table schema
    console.log('üìã Checking user table schema...')
    const userSchema = await prisma.$queryRaw`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'id'
    `
    console.log('User ID type:', userSchema)

    // Use the correct user ID type (TEXT instead of UUID)
    console.log('üìã Creating semantic cache table with correct user ID type...')
    try {
      await prisma.$queryRaw`
        CREATE TABLE IF NOT EXISTS semantic_cache (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          query_hash VARCHAR(64) NOT NULL,
          query_embedding vector(1536) NOT NULL,
          cached_response JSONB NOT NULL,
          context_data JSONB,
          created_at TIMESTAMP DEFAULT NOW(),
          expires_at TIMESTAMP DEFAULT (NOW() + INTERVAL '30 minutes'),
          hit_count INT DEFAULT 0,
          last_hit TIMESTAMP,
          UNIQUE(user_id, query_hash)
        )
      `
      console.log('‚úÖ Semantic cache table created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Semantic cache table creation failed:', error.message)
    }

    // Create performance metrics table with correct user ID type
    console.log('üìã Creating performance metrics table...')
    try {
      await prisma.$queryRaw`
        CREATE TABLE IF NOT EXISTS rag_performance_metrics (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id TEXT REFERENCES users(id) ON DELETE SET NULL,
          operation VARCHAR(50) NOT NULL,
          duration_ms INT NOT NULL,
          success BOOLEAN NOT NULL,
          query_length INT,
          context_length INT,
          docs_retrieved INT,
          docs_final INT,
          timestamp TIMESTAMP DEFAULT NOW(),
          metadata JSONB DEFAULT '{}'
        )
      `
      console.log('‚úÖ Performance metrics table created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Performance metrics table creation failed:', error.message)
    }

    // Create unified knowledge base table with correct user ID type
    console.log('üìã Creating unified knowledge base table...')
    try {
      await prisma.$queryRaw`
        CREATE TABLE IF NOT EXISTS user_knowledge_base (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          content TEXT NOT NULL,
          content_type VARCHAR(50) NOT NULL DEFAULT 'conversation',
          embedding vector(1536),
          sparse_embedding tsvector GENERATED ALWAYS AS (to_tsvector('english', content)) STORED,
          metadata JSONB DEFAULT '{}',
          topics TEXT[] DEFAULT '{}',
          sentiment VARCHAR(20),
          intent VARCHAR(50),
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW(),
          last_accessed TIMESTAMP DEFAULT NOW(),
          access_count INT DEFAULT 0,
          importance_score FLOAT DEFAULT 1.0,
          CONSTRAINT valid_content_type CHECK (
            content_type IN ('conversation', 'document', 'preference', 'feedback', 'memory')
          )
        )
      `
      console.log('‚úÖ Unified knowledge base table created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Knowledge base table creation failed:', error.message)
    }

    // Create indexes for new tables
    console.log('üìã Creating indexes for new tables...')
    try {
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_knowledge_user ON user_knowledge_base(user_id)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_knowledge_hnsw ON user_knowledge_base USING hnsw(embedding vector_cosine_ops)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_knowledge_fulltext ON user_knowledge_base USING gin(sparse_embedding)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_knowledge_metadata ON user_knowledge_base USING gin(metadata)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_knowledge_topics ON user_knowledge_base USING gin(topics)
      `
      console.log('‚úÖ Knowledge base indexes created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Knowledge base indexes creation failed:', error.message)
    }

    // Create cache indexes
    console.log('üìã Creating cache indexes...')
    try {
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_semantic_cache_user ON semantic_cache(user_id)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_semantic_cache_embedding ON semantic_cache USING hnsw(query_embedding vector_cosine_ops)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_semantic_cache_expires ON semantic_cache(expires_at)
      `
      console.log('‚úÖ Cache indexes created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Cache indexes creation failed:', error.message)
    }

    // Create performance metrics indexes
    console.log('üìã Creating performance metrics indexes...')
    try {
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_rag_metrics_timestamp ON rag_performance_metrics(timestamp DESC)
      `
      await prisma.$queryRaw`
        CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_rag_metrics_operation ON rag_performance_metrics(operation, timestamp DESC)
      `
      console.log('‚úÖ Performance metrics indexes created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Performance metrics indexes creation failed:', error.message)
    }

    // Add utility function for access metrics
    console.log('üìã Creating access metrics function...')
    try {
      await prisma.$queryRaw`
        CREATE OR REPLACE FUNCTION update_access_metrics(record_ids UUID[])
        RETURNS void AS $$
        BEGIN
          UPDATE user_interaction_embeddings
          SET 
            last_accessed = NOW(),
            access_count = access_count + 1
          WHERE id = ANY(record_ids);
        END;
        $$ LANGUAGE plpgsql
      `
      console.log('‚úÖ Access metrics function created')
    } catch (error) {
      console.log('‚ö†Ô∏è  Access metrics function creation failed:', error.message)
    }

    // Verify all tables exist
    console.log('üìã Verifying tables...')
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('semantic_cache', 'rag_performance_metrics', 'user_knowledge_base')
    `
    console.log('‚úÖ Tables created:', tables.map(t => t.table_name))

    console.log('\nüéâ RAG Migration Fix completed successfully!')
    console.log('\n‚úÖ RAG System Components:')
    console.log('   ‚Ä¢ pgvector extension: ‚úÖ')
    console.log('   ‚Ä¢ HNSW indexes: ‚úÖ')
    console.log('   ‚Ä¢ Full-text search: ‚úÖ')
    console.log('   ‚Ä¢ Semantic cache: ‚úÖ')
    console.log('   ‚Ä¢ Performance monitoring: ‚úÖ')
    console.log('   ‚Ä¢ Unified knowledge base: ‚úÖ')
    console.log('   ‚Ä¢ Utility functions: ‚úÖ')

  } catch (error) {
    console.error('‚ùå Migration fix failed:', error.message)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Run migration fix
fixMigration()
