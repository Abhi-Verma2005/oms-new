generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Copied from OMS schema (unchanged)
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  mfaEnabled     Boolean         @default(false) @map("mfa_enabled")
  mfaSecret      String?         @map("mfa_secret")
  backupCodes    String[]        @map("backup_codes")
  password       String?
  accounts       Account[]
  authenticators Authenticator[]
  orders         Order[]
  savedViews     SavedView[]
  sessions       Session[]
  userRoles      UserRole[]
  activities     UserActivity[]
  notificationReads UserNotificationRead[]
  onboardingProfile OnboardingProfile?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                   String   @id @default(cuid())
  credentialID         String   @unique @map("credential_id")
  userId               String   @map("user_id")
  providerAccountId    String   @map("provider_account_id")
  credentialPublicKey  String   @map("credential_public_key")
  counter              Int
  credentialDeviceType String   @map("credential_device_type")
  credentialBackedUp   Boolean  @map("credential_backed_up")
  transports           String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String           @map("display_name")
  description     String?
  isSystem        Boolean          @default(false) @map("is_system")
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String           @map("display_name")
  description     String?
  resource        String
  action          String
  isSystem        Boolean          @default(false) @map("is_system")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  roleId     String    @map("role_id")
  assignedBy String?   @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  grantedBy    String?    @map("granted_by")
  grantedAt    DateTime   @default(now()) @map("granted_at")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Order {
  id           String        @id @default(cuid())
  userId       String        @map("user_id")
  status       OrderStatus
  totalAmount  Int           @map("total_amount")
  currency     String        @default("USD")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  items        OrderItem[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  @map("order_id")
  quantity    Int     @default(1)
  priceCents  Int     @map("price_cents")
  siteId      String  @map("site_id")
  siteName    String  @map("site_name")
  withContent Boolean @map("with_content")
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Transaction {
  id        String            @id @default(cuid())
  orderId   String            @map("order_id")
  amount    Int
  currency  String            @default("USD")
  status    TransactionStatus @default(INITIATED)
  provider  String?
  reference String?
  createdAt DateTime          @default(now()) @map("created_at")
  order     Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model SavedView {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  filters   Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("saved_views")
}

model UserActivity {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  activity    String
  category    ActivityCategory
  description String?
  metadata    Json?
  ipAddress   String?           @map("ip_address")
  userAgent   String?           @map("user_agent")
  createdAt   DateTime          @default(now()) @map("created_at")
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
  @@index([userId, createdAt])
  @@index([category, createdAt])
}

enum ActivityCategory {
  AUTHENTICATION
  NAVIGATION
  ORDER
  PAYMENT
  CART
  PROFILE
  ADMIN
  API
  ERROR
  OTHER
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum TransactionStatus {
  INITIATED
  SUCCESS
  FAILED
}

// Case Studies Models for EMIAC Dashboard
model CaseStudy {
  id                String   @id @default(cuid())
  clientName        String   @map("client_name")
  industry          String
  campaignDuration  String   @map("campaign_duration")
  startDate         DateTime @map("start_date")
  endDate           DateTime? @map("end_date")
  isActive          Boolean  @default(true) @map("is_active")
  
  // Key Results
  trafficGrowth     Float    @map("traffic_growth") // Percentage growth
  initialTraffic    Float    @map("initial_traffic") // In lacs
  finalTraffic      Float    @map("final_traffic") // In lacs
  keywordsRanked    Int      @map("keywords_ranked")
  backlinksPerMonth Int      @map("backlinks_per_month")
  domainRatingStart Int?     @map("domain_rating_start")
  domainRatingEnd   Int?     @map("domain_rating_end")
  
  // Content
  objective         String
  challenge         String
  solution          String
  finalOutcomes     String   @map("final_outcomes")
  
  // SEO Features
  serpFeatures      Boolean  @default(false) @map("serp_features")
  aiOverview        Boolean  @default(false) @map("ai_overview")
  
  // Metadata
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdBy         String?  @map("created_by")
  
  // Relations
  monthlyData       MonthlyData[]
  keywordData       KeywordData[]
  serpFeaturesList      SerpFeature[]
  
  @@map("case_studies")
}

model MonthlyData {
  id           String    @id @default(cuid())
  caseStudyId  String    @map("case_study_id")
  month        String    // e.g., "Feb 2025"
  traffic      Float     // Traffic in lacs
  keywords     Int       // Number of keywords ranked
  backlinks    Int       // Backlinks generated
  createdAt    DateTime  @default(now()) @map("created_at")
  
  caseStudy    CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)
  
  @@unique([caseStudyId, month])
  @@map("monthly_data")
}

model KeywordData {
  id           String    @id @default(cuid())
  caseStudyId  String    @map("case_study_id")
  keyword      String
  jan2025      Int?      @map("jan_2025")
  feb2025      Int?      @map("feb_2025")
  mar2025      Int?      @map("mar_2025")
  apr2025      Int?      @map("apr_2025")
  may2025      Int?      @map("may_2025")
  jun2025      Int?      @map("jun_2025")
  jul2025      Int?      @map("jul_2025")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  caseStudy    CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)
  
  @@map("keyword_data")
}

model SerpFeature {
  id           String    @id @default(cuid())
  caseStudyId  String    @map("case_study_id")
  featureType  String    @map("feature_type") // "AI Overview", "Featured Snippet", etc.
  keyword      String
  url          String
  position     Int?      // Position in SERP
  createdAt    DateTime  @default(now()) @map("created_at")
  
  caseStudy    CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)
  
  @@map("serp_features")
}

// Notification System Models
model NotificationType {
  id          String        @id @default(cuid())
  name        String        @unique
  displayName String        @map("display_name")
  description String?
  icon        String?       // Icon name or emoji for the notification type
  color       String?       // Color theme for the notification type
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  notifications Notification[]
  
  @@map("notification_types")
}

model Notification {
  id               String           @id @default(cuid())
  title            String
  body             String
  imageUrl         String?          @map("image_url") // Banner image URL
  typeId           String           @map("type_id")
  isActive         Boolean          @default(true) @map("is_active")
  isGlobal         Boolean          @default(true) @map("is_global") // If true, shows to all users
  targetUserIds    String[]         @map("target_user_ids") // Specific user IDs if not global
  priority         NotificationPriority @default(NORMAL)
  expiresAt        DateTime?        @map("expires_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  createdBy        String?          @map("created_by") // Admin user who created this notification
  
  // Relations
  type             NotificationType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  userReads        UserNotificationRead[]
  
  @@map("notifications")
  @@index([isActive, isGlobal, createdAt])
  @@index([expiresAt])
}

model UserNotificationRead {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  notificationId String       @map("notification_id")
  readAt         DateTime     @default(now()) @map("read_at")
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, notificationId])
  @@map("user_notification_reads")
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}


/// Optional, progressive onboarding data captured post-signup
model OnboardingProfile {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  // Step tracking
  currentStep   Int      @default(1) @map("current_step")

  // Step 1 - situation
  situation     String?  // "company" | "freelancer" | "getting_started"

  // Step 2 - company type and preferences
  companyType   String?  @map("company_type") // "individual" | "organization"
  marketingOptIn Boolean? @map("marketing_opt_in")

  // Step 3 - company information
  companyName   String?  @map("company_name")
  city          String?
  postalCode    String?  @map("postal_code")
  street        String?
  country       String?

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding_profiles")
}


