generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid()) 
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                          String                        @id @default(cuid())
  name                        String?
  email                       String                        @unique
  emailVerified               DateTime?                     @map("email_verified")
  image                       String?
  createdAt                   DateTime                      @default(now()) @map("created_at")
  updatedAt                   DateTime                      @updatedAt @map("updated_at")
  mfaEnabled                  Boolean                       @default(false) @map("mfa_enabled")
  mfaSecret                   String?                       @map("mfa_secret")
  backupCodes                 String[]                      @map("backup_codes")
  password                    String?
  dailyCredits                Int                           @default(50) @map("daily_credits")
  lastCreditReset             DateTime?                     @map("last_credit_reset")
  accounts                    Account[]
  authenticators              Authenticator[]
  bonusGrants                 BonusGrant[]
  chat_sessions               chat_sessions[]
  cross_chat_references       cross_chat_references[]
  feedbacks                   Feedback[]
  onboardingProfile           OnboardingProfile?
  orderFilters                OrderFilter[]
  orders                      Order[]
  filterPrefs                 ProjectFilterPreference[]
  projects                    Project[]
  ragPerformanceMetrics       RAGPerformanceMetrics[]
  savedViews                  SavedView[]
  searchInterests             SearchInterest[]
  semanticCache               SemanticCache[]
  sessions                    Session[]
  activities                  UserActivity[]
  userAIInsights              UserAIInsights?
  userContext                 UserContext?
  user_context_profiles       user_context_profiles?
  user_documents              user_documents[]
  user_interaction_embeddings user_interaction_embeddings[]
  interactions                UserInteraction[]
  knowledgeBase               UserKnowledgeBase[]
  notificationReads           UserNotificationRead[]
  user_personality            user_personality?
  userProfile                 UserProfile?
  userRoles                   UserRole[]
  userTags                    UserTag[]
  user_topic_clusters         user_topic_clusters[]
  wishlists                   Wishlist[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                   String   @id @default(cuid())
  credentialID         String   @unique @map("credential_id")
  userId               String   @map("user_id")
  providerAccountId    String   @map("provider_account_id")
  credentialPublicKey  String   @map("credential_public_key")
  counter              Int
  credentialDeviceType String   @map("credential_device_type")
  credentialBackedUp   Boolean  @map("credential_backed_up")
  transports           String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String           @map("display_name")
  description     String?
  isSystem        Boolean          @default(false) @map("is_system")
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String           @map("display_name")
  description     String?
  resource        String
  action          String
  isSystem        Boolean          @default(false) @map("is_system")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  roleId     String    @map("role_id")
  assignedBy String?   @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  grantedBy    String?    @map("granted_by")
  grantedAt    DateTime   @default(now()) @map("granted_at")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Order {
  id           String        @id @default(cuid())
  userId       String        @map("user_id")
  status       OrderStatus
  totalAmount  Int           @map("total_amount")
  currency     String        @default("USD")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  projectId    String?       @map("project_id")
  items        OrderItem[]
  orderTags    OrderTag[]
  project      Project?      @relation(fields: [projectId], references: [id])
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId, projectId, createdAt])
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  @map("order_id")
  quantity    Int     @default(1)
  priceCents  Int     @map("price_cents")
  siteId      String  @map("site_id")
  siteName    String  @map("site_name")
  withContent Boolean @map("with_content")
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Transaction {
  id        String            @id @default(cuid())
  orderId   String            @map("order_id")
  amount    Int
  currency  String            @default("USD")
  status    TransactionStatus @default(INITIATED)
  provider  String?
  reference String?
  createdAt DateTime          @default(now()) @map("created_at")
  order     Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model SavedView {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String?  @map("project_id")
  name      String
  filters   Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id])

  @@unique([userId, name])
  @@map("saved_views")
}

model UserActivity {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  activity    String
  category    ActivityCategory
  description String?
  metadata    Json?
  ipAddress   String?          @map("ip_address")
  userAgent   String?          @map("user_agent")
  createdAt   DateTime         @default(now()) @map("created_at")
  projectId   String?          @map("project_id")
  project     Project?         @relation(fields: [projectId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([category, createdAt])
  @@index([userId, projectId, createdAt])
  @@map("user_activities")
}

model CaseStudy {
  id                String        @id @default(cuid())
  clientName        String        @map("client_name")
  industry          String
  campaignDuration  String        @map("campaign_duration")
  startDate         DateTime      @map("start_date")
  endDate           DateTime?     @map("end_date")
  isActive          Boolean       @default(true) @map("is_active")
  trafficGrowth     Float         @map("traffic_growth")
  initialTraffic    Float         @map("initial_traffic")
  finalTraffic      Float         @map("final_traffic")
  keywordsRanked    Int           @map("keywords_ranked")
  backlinksPerMonth Int           @map("backlinks_per_month")
  domainRatingStart Int?          @map("domain_rating_start")
  domainRatingEnd   Int?          @map("domain_rating_end")
  objective         String
  challenge         String
  solution          String
  finalOutcomes     String        @map("final_outcomes")
  serpFeatures      Boolean       @default(false) @map("serp_features")
  aiOverview        Boolean       @default(false) @map("ai_overview")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  createdBy         String?       @map("created_by")
  keywordData       KeywordData[]
  monthlyData       MonthlyData[]
  serpFeaturesList  SerpFeature[]

  @@map("case_studies")
}

model HomepageCaseStudy {
  id           String   @id @default(cuid())
  title        String
  subtitle     String
  imageSrc     String   @map("image_src")
  category     String
  isActive     Boolean  @default(true) @map("is_active")
  displayOrder Int      @default(0) @map("display_order")
  stats        Json
  link         String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdBy    String?  @map("created_by")

  @@map("homepage_case_studies")
}

model MonthlyData {
  id          String    @id @default(cuid())
  caseStudyId String    @map("case_study_id")
  month       String
  traffic     Float
  keywords    Int
  backlinks   Int
  createdAt   DateTime  @default(now()) @map("created_at")
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)

  @@unique([caseStudyId, month])
  @@map("monthly_data")
}

model KeywordData {
  id          String    @id @default(cuid())
  caseStudyId String    @map("case_study_id")
  keyword     String
  jan2025     Int?      @map("jan_2025")
  feb2025     Int?      @map("feb_2025")
  mar2025     Int?      @map("mar_2025")
  apr2025     Int?      @map("apr_2025")
  may2025     Int?      @map("may_2025")
  jun2025     Int?      @map("jun_2025")
  jul2025     Int?      @map("jul_2025")
  createdAt   DateTime  @default(now()) @map("created_at")
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)

  @@map("keyword_data")
}

model SerpFeature {
  id          String    @id @default(cuid())
  caseStudyId String    @map("case_study_id")
  featureType String    @map("feature_type")
  keyword     String
  url         String
  position    Int?
  createdAt   DateTime  @default(now()) @map("created_at")
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)

  @@map("serp_features")
}

model NotificationType {
  id            String         @id @default(cuid())
  name          String         @unique
  displayName   String         @map("display_name")
  description   String?
  icon          String?
  color         String?
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  notifications Notification[]

  @@map("notification_types")
}

model Notification {
  id            String                 @id @default(cuid())
  title         String
  body          String
  imageUrl      String?                @map("image_url")
  typeId        String                 @map("type_id")
  isActive      Boolean                @default(true) @map("is_active")
  isGlobal      Boolean                @default(true) @map("is_global")
  targetUserIds String[]               @map("target_user_ids")
  priority      NotificationPriority   @default(NORMAL)
  expiresAt     DateTime?              @map("expires_at")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  createdBy     String?                @map("created_by")
  type          NotificationType       @relation(fields: [typeId], references: [id], onDelete: Cascade)
  userReads     UserNotificationRead[]

  @@index([isActive, isGlobal, createdAt])
  @@index([expiresAt])
  @@map("notifications")
}

model UserNotificationRead {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  notificationId String       @map("notification_id")
  readAt         DateTime     @default(now()) @map("read_at")
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@map("user_notification_reads")
}

/// Optional, progressive onboarding data captured post-signup
model OnboardingProfile {
  id             String   @id @default(cuid())
  userId         String   @unique @map("user_id")
  currentStep    Int      @default(1) @map("current_step")
  situation      String?
  companyType    String?  @map("company_type")
  marketingOptIn Boolean? @map("marketing_opt_in")
  companyName    String?  @map("company_name")
  city           String?
  postalCode     String?  @map("postal_code")
  street         String?
  country        String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  competitorUrl  String?  @map("competitor_url")
  monthlyBudget  String?  @map("monthly_budget")
  promotedUrl    String?  @map("promoted_url")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding_profiles")
}

model ChangelogEntry {
  id          String   @id @default(cuid())
  title       String
  body        String
  category    String
  isPublished Boolean  @default(true) @map("is_published")
  publishedAt DateTime @default(now()) @map("published_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  authorId    String?  @map("author_id")

  @@index([isPublished, publishedAt])
  @@index([category])
  @@map("changelog_entries")
}

model SearchInterest {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  query     String
  filters   Json?
  notified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  projectId String?  @map("project_id")
  project   Project? @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, query])
  @@index([notified, createdAt])
  @@index([userId, projectId, createdAt])
  @@map("search_interests")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  rating    Int
  category  String?
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([rating])
  @@map("feedback")
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @map("user_id")
  name      String         @default("Default")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  projectId String?        @map("project_id")
  items     WishlistItem[]
  project   Project?       @relation(fields: [projectId], references: [id])
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId, projectId, createdAt])
  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String   @map("wishlist_id")
  siteId     String   @map("site_id")
  siteName   String   @map("site_name")
  siteUrl    String?  @map("site_url")
  priceCents Int?     @map("price_cents")
  currency   String   @default("USD")
  addedAt    DateTime @default(now()) @map("added_at")
  notes      String?
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, siteId])
  @@index([siteId, addedAt])
  @@map("wishlist_items")
}

model AIChatbotConfig {
  id             String   @id @default(cuid())
  systemPrompt   String   @map("system_prompt")
  navigationData Json     @map("navigation_data")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("ai_chatbot_config")
}

model AIChatbotNavigation {
  id          String   @id @default(cuid())
  name        String
  route       String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([name, route])
  @@map("ai_chatbot_navigation")
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  color       String       @default("#3B82F6")
  description String?
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  createdBy   String?      @map("created_by")
  bonusRules  BonusRule[]
  orderTags   OrderTag[]
  productTags ProductTag[]
  reviewTags  ReviewTag[]
  userTags    UserTag[]

  @@map("tags")
}

model UserTag {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  tagId      String    @map("tag_id")
  assignedBy String    @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")
  notes      String?
  tag        Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@map("user_tags")
}

model OrderTag {
  id         String   @id @default(cuid())
  orderId    String   @map("order_id")
  tagId      String   @map("tag_id")
  assignedBy String   @map("assigned_by")
  assignedAt DateTime @default(now()) @map("assigned_at")
  notes      String?
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([orderId, tagId])
  @@map("order_tags")
}

model OrderFilter {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  filters   Json
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("order_filters")
}

model BonusRule {
  id          String       @id @default(cuid())
  name        String
  description String?
  tagId       String?      @map("tag_id")
  filters     Json
  bonusAmount Int          @map("bonus_amount")
  maxUsers    Int?         @map("max_users")
  isActive    Boolean      @default(true) @map("is_active")
  startsAt    DateTime?    @map("starts_at")
  expiresAt   DateTime?    @map("expires_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  createdBy   String       @map("created_by")
  bonusGrants BonusGrant[]
  tag         Tag?         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("bonus_rules")
}

model BonusGrant {
  id          String    @id @default(cuid())
  bonusRuleId String    @map("bonus_rule_id")
  userId      String    @map("user_id")
  amount      Int
  grantedAt   DateTime  @default(now()) @map("granted_at")
  grantedBy   String    @map("granted_by")
  notes       String?
  bonusRule   BonusRule @relation(fields: [bonusRuleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bonusRuleId, userId])
  @@map("bonus_grants")
}

model Project {
  id              String                    @id @default(cuid())
  userId          String                    @map("user_id")
  name            String
  domain          String                    @unique
  description     String?
  defaultUrl      String?                   @map("default_url")
  defaultAnchor   String?                   @map("default_anchor")
  createdAt       DateTime                  @default(now()) @map("created_at")
  updatedAt       DateTime                  @updatedAt @map("updated_at")
  avgTraffic      Int?                      @map("avg_traffic")
  domainRating    Int?                      @map("domain_rating")
  orders          Order[]
  competitors     ProjectCompetitor[]
  filterPrefs     ProjectFilterPreference[]
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchInterests SearchInterest[]
  activities      UserActivity[]
  wishlists       Wishlist[]
  savedViews      SavedView[]

  @@index([userId, createdAt])
  @@map("projects")
}

model ProjectCompetitor {
  id           String   @id @default(cuid())
  projectId    String   @map("project_id")
  name         String
  domain       String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  traffic      Int?
  domainRating Int?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, domain])
  @@map("project_competitors")
}

model ProjectFilterPreference {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  page      String
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, page])
  @@index([projectId, page])
  @@map("project_filter_preferences")
}

model Product {
  id                      String           @id @default(cuid())
  slug                    String           @unique
  header                  String
  subheader               String?
  imageUrl                String?
  descriptionMarkdown     String?
  pricePerMonthCents      Int?             @map("price_per_month_cents")
  discountPercent         Int?             @map("discount_percent")
  finalPricePerMonthCents Int?             @map("final_price_per_month_cents")
  currency                String           @default("USD")
  badge                   String?
  showOnShop2             Boolean          @default(false) @map("show_on_shop2")
  showOnLinkBuilding      Boolean          @default(false) @map("show_on_link_building")
  isActive                Boolean          @default(true) @map("is_active")
  sortOrder               Int              @default(0) @map("sort_order")
  createdAt               DateTime         @default(now()) @map("created_at")
  updatedAt               DateTime         @updatedAt @map("updated_at")
  features                ProductFeature[]
  productTags             ProductTag[]
  reviewProducts          ReviewProduct[]

  @@index([showOnShop2, showOnLinkBuilding, isActive, sortOrder])
  @@map("products")
}

model ProductFeature {
  id        String  @id @default(cuid())
  productId String  @map("product_id")
  title     String
  value     String?
  icon      String?
  sortOrder Int     @default(0) @map("sort_order")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, sortOrder])
  @@map("product_features")
}

model ProductTag {
  id         String   @id @default(cuid())
  productId  String   @map("product_id")
  tagId      String   @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

model Review {
  id             String          @id @default(cuid())
  authorName     String          @map("author_name")
  rating         Int
  bodyMarkdown   String          @map("body_markdown")
  isApproved     Boolean         @default(true) @map("is_approved")
  displayOrder   Int             @default(0) @map("display_order")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  reviewProducts ReviewProduct[]
  reviewTags     ReviewTag[]

  @@index([isApproved, displayOrder])
  @@map("reviews")
}

model ReviewTag {
  id         String   @id @default(cuid())
  reviewId   String   @map("review_id")
  tagId      String   @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([reviewId, tagId])
  @@map("review_tags")
}

model ReviewProduct {
  id         String   @id @default(cuid())
  reviewId   String   @map("review_id")
  productId  String   @map("product_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, productId])
  @@map("review_products")
}

model UserProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique @map("user_id")
  companyName          String?  @map("company_name")
  companySize          String?  @map("company_size")
  industry             String?
  role                 String?
  department           String?
  website              String?
  experience           String?
  primaryGoals         String[] @map("primary_goals")
  currentProjects      String[] @map("current_projects")
  budget               String?
  teamSize             String?
  communicationStyle   String?  @map("communication_style")
  preferredContentType String[] @map("preferred_content_type")
  timezone             String?
  workingHours         Json?    @map("working_hours")
  language             String?  @default("en")
  leadSource           String?  @map("lead_source")
  leadScore            Int?     @map("lead_score")
  marketingOptIn       Boolean  @default(false) @map("marketing_opt_in")
  newsletterOptIn      Boolean  @default(false) @map("newsletter_opt_in")
  lastUpdated          DateTime @updatedAt @map("last_updated")
  createdAt            DateTime @default(now()) @map("created_at")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserAIInsights {
  id                    String            @id @default(cuid())
  userId                String            @unique @map("user_id")
  personalityTraits     Json?             @map("personality_traits")
  behaviorPatterns      Json?             @map("behavior_patterns")
  learningStyle         String?           @map("learning_style")
  expertiseLevel        Json?             @map("expertise_level")
  conversationTone      String?           @map("conversation_tone")
  communicationPatterns Json?             @map("communication_patterns")
  topicInterests        String[]          @map("topic_interests")
  painPoints            String[]          @map("pain_points")
  aiMetadata            Json?             @map("ai_metadata")
  confidenceScore       Float?            @map("confidence_score")
  lastAnalysisAt        DateTime          @map("last_analysis_at")
  lastUpdated           DateTime          @updatedAt @map("last_updated")
  createdAt             DateTime          @default(now()) @map("created_at")
  insightUpdates        AIInsightUpdate[]
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_ai_insights")
}

model AIInsightUpdate {
  id               String              @id @default(cuid())
  userAIInsightsId String              @map("user_ai_insights_id")
  updateType       AIInsightUpdateType @map("update_type")
  field            String?
  oldValue         Json?               @map("old_value")
  newValue         Json?               @map("new_value")
  aiConfidence     Float?              @map("ai_confidence")
  aiReasoning      String?             @map("ai_reasoning")
  source           String?
  createdAt        DateTime            @default(now()) @map("created_at")
  userAIInsights   UserAIInsights      @relation(fields: [userAIInsightsId], references: [id], onDelete: Cascade)

  @@index([userAIInsightsId, createdAt])
  @@index([updateType, createdAt])
  @@map("ai_insight_updates")
}

model UserContext {
  id                   String          @id @default(cuid())
  userId               String          @unique @map("user_id")
  companyName          String?         @map("company_name")
  companySize          String?         @map("company_size")
  industry             String?
  role                 String?
  department           String?
  experience           String?
  primaryGoals         String[]        @map("primary_goals")
  currentProjects      String[]        @map("current_projects")
  communicationStyle   String?         @map("communication_style")
  preferredContentType String[]        @map("preferred_content_type")
  timezone             String?
  workingHours         Json?           @map("working_hours")
  aiInsights           Json?           @map("ai_insights")
  learningStyle        String?         @map("learning_style")
  expertiseLevel       Json?           @map("expertise_level")
  lastUpdated          DateTime        @updatedAt @map("last_updated")
  createdAt            DateTime        @default(now()) @map("created_at")
  aiMetadata           Json?           @map("ai_metadata")
  contextUpdates       ContextUpdate[]
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_context")
}

model ContextUpdate {
  id            String            @id @default(cuid())
  userContextId String            @map("user_context_id")
  updateType    ContextUpdateType @map("update_type")
  field         String?
  oldValue      Json?             @map("old_value")
  newValue      Json?             @map("new_value")
  aiConfidence  Float?            @map("ai_confidence")
  aiReasoning   String?           @map("ai_reasoning")
  source        String?
  createdAt     DateTime          @default(now()) @map("created_at")
  userContext   UserContext       @relation(fields: [userContextId], references: [id], onDelete: Cascade)

  @@index([userContextId, createdAt])
  @@index([updateType, createdAt])
  @@map("context_updates")
}

model UserInteraction {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  interactionType InteractionType @map("interaction_type")
  content         String?
  response        String?
  context         Json?
  sentiment       String?
  intent          String?
  topics          String[]
  preferences     Json?
  timestamp       DateTime        @default(now())
  sessionId       String?         @map("session_id")
  pageUrl         String?         @map("page_url")
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([interactionType, timestamp])
  @@map("user_interactions")
}

model content_embeddings {
  id           String   @id
  content_id   String
  content_type String
  title        String
  body         String
  category     String?
  embedding    Json?
  metadata     Json
  created_at   DateTime @default(now())
  updated_at   DateTime

  @@index([content_type, category])
}

model product_embeddings {
  id          String   @id
  product_id  String   @unique
  title       String
  description String
  category    String
  tags        String[]
  embedding   Json?
  metadata    Json
  created_at  DateTime @default(now())
  updated_at  DateTime

  @@index([category])
}

model user_context_profiles {
  id                          String   @id
  user_id                     String   @unique
  preference_embedding        Json?
  interests                   String[]
  search_patterns             Json
  purchase_history            Json
  behavior_insights           Json
  exploration_vs_exploitation Float    @default(0.5)
  last_updated                DateTime
  users                       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model user_interaction_embeddings {
  id                 String                 @id
  user_id            String
  content            String
  contentType        String
  session_id         String?
  page_context       String?
  timestamp          DateTime               @default(now())
  importance         Float                  @default(1.0)
  extracted_insights Json?
  sentiment          String?
  intent             String?
  topics             String[]
  embedding          Unsupported("vector")?
  users              User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, contentType])
  @@index([user_id, timestamp])
  @@index([embedding])
  @@index([embedding], map: "idx_user_interaction_embeddings_hnsw")
}

model chat_sessions {
  id              String   @id
  user_id         String
  session_id      String   @unique
  title           String?
  description     String?
  message_count   Int      @default(0)
  last_message_at DateTime @default(now())
  created_at      DateTime @default(now())
  is_active       Boolean  @default(true)
  topics          String[]
  summary         String?
  users           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([is_active])
  @@index([user_id, created_at])
  @@index([user_id, last_message_at])
}

model cross_chat_references {
  id                String   @id
  user_id           String
  source_session_id String
  target_session_id String
  relevance_score   Float
  reference_type    String
  source_content    String
  target_content    String
  topics            String[]
  similarity        Float
  created_at        DateTime @default(now())
  users             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([source_session_id, target_session_id])
  @@index([user_id, reference_type])
  @@index([user_id, relevance_score])
}

model user_personality {
  id                   String   @id
  user_id              String   @unique
  communication_style  String?
  detail_preference    String?
  expertise_areas      String[]
  learning_style       String?
  interaction_patterns Json?
  response_length_pref String?
  technical_level      String?
  preferred_examples   Boolean  @default(true)
  last_updated         DateTime @default(now())
  confidence           Float    @default(0.0)
  users                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_topic_clusters {
  id             String   @id
  user_id        String
  topic          String
  session_ids    String[]
  frequency      Int      @default(1)
  last_mentioned DateTime @default(now())
  related_topics String[]
  importance     Float    @default(1.0)
  created_at     DateTime @default(now())
  users          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, topic])
  @@index([user_id, frequency])
  @@index([user_id, last_mentioned])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model UserKnowledgeBase {
  id              String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String                 @map("user_id")
  content         String
  contentType     String                 @default("conversation") @map("content_type")
  embedding       Unsupported("vector")?
  metadata        Json                   @default("{}")
  topics          String[]               @default([])
  sentiment       String?
  intent          String?
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  lastAccessed    DateTime               @default(now()) @map("last_accessed")
  accessCount     Int                    @default(0) @map("access_count")
  importanceScore Float                  @default(1.0) @map("importance_score")
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_knowledge_base")
}

model SemanticCache {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String                @map("user_id")
  queryHash      String                @map("query_hash") @db.VarChar(64)
  queryEmbedding Unsupported("vector") @map("query_embedding")
  cachedResponse Json                  @map("cached_response")
  contextData    Json?                 @map("context_data")
  createdAt      DateTime              @default(now()) @map("created_at")
  expiresAt      DateTime              @map("expires_at")
  hitCount       Int                   @default(0) @map("hit_count")
  lastHit        DateTime?             @map("last_hit")
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, queryHash])
  @@map("semantic_cache")
}

model RAGPerformanceMetrics {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @map("user_id")
  operation     String
  durationMs    Int      @map("duration_ms")
  success       Boolean
  queryLength   Int?     @map("query_length")
  contextLength Int?     @map("context_length")
  docsRetrieved Int?     @map("docs_retrieved")
  docsFinal     Int?     @map("docs_final")
  timestamp     DateTime @default(now())
  metadata      Json     @default("{}")
  user          User?    @relation(fields: [userId], references: [id])

  @@map("rag_performance_metrics")
}

model user_documents {
  id                 String                    @id
  user_id            String
  original_name      String
  file_name          String
  file_url           String
  file_size          Int?
  mime_type          String?
  uploaded_at        DateTime                  @default(now())
  last_accessed      DateTime?
  access_count       Int                       @default(0)
  is_active          Boolean                   @default(true)
  chunk_count        Int                       @default(0) @map("chunk_count")
  content_summary    String?                   @map("content_summary")
  error_message      String?                   @map("error_message")
  file_hash          String?                   @map("file_hash") @db.VarChar(64)
  pinecone_namespace String?                   @map("pinecone_namespace")
  processing_status  String                    @default("pending") @map("processing_status")
  chunk_metadata     document_chunk_metadata[]
  users              User                      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([file_name])
  @@index([user_id, uploaded_at])
  @@index([processing_status])
  @@index([file_hash])
}

model document_chunk_metadata {
  id          String         @id
  document_id String         @map("document_id")
  user_id     String         @map("user_id")
  chunk_index Int            @map("chunk_index")
  token_count Int?           @map("token_count")
  pinecone_id String         @map("pinecone_id")
  created_at  DateTime       @default(now())
  document    user_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@index([user_id])
  @@index([pinecone_id])
}

enum ActivityCategory {
  AUTHENTICATION
  NAVIGATION
  ORDER
  PAYMENT
  CART
  PROFILE
  ADMIN
  API
  ERROR
  OTHER
  WISHLIST
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum TransactionStatus {
  INITIATED
  SUCCESS
  FAILED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ContextUpdateType {
  COMPANY_INFO
  PREFERENCES
  BEHAVIOR
  EXPERTISE
  GOALS
  COMMUNICATION_STYLE
  LEARNING_STYLE
  WORKING_HOURS
  AI_INSIGHTS
  GENERAL
}

enum AIInsightUpdateType {
  PERSONALITY_TRAITS
  BEHAVIOR_PATTERNS
  LEARNING_STYLE
  EXPERTISE_LEVEL
  CONVERSATION_TONE
  COMMUNICATION_PATTERNS
  TOPIC_INTERESTS
  PAIN_POINTS
  AI_METADATA
  CONFIDENCE_SCORE
  GENERAL
}

enum InteractionType {
  CHAT_MESSAGE
  PAGE_VIEW
  SEARCH_QUERY
  FILTER_USAGE
  PURCHASE
  FEEDBACK
  SUPPORT_REQUEST
  NAVIGATION
  PREFERENCE_CHANGE
  OTHER
}
